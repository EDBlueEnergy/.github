name: Update Repo Rulesets

on:
  push:
    paths:
      - ".github/repo-feature-ruleset.json"
      - ".github/workflows/update-repo-rulesets.yml"
      - ".github/repo-azure-ruleset.json"
  workflow_dispatch:
jobs:
  fetch-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List repositories
        id: list-repos
        env:
          ACCESS_TOKEN: ${{ secrets.BLUE_ENERGY_TOKEN }}
          ORG_NAME: "EDBlueEnergy"
        run: |
          API_URL="https://api.github.com/orgs/$ORG_NAME/repos?per_page=1000"
          REPOS=$(curl -s -H "Authorization: token $ACCESS_TOKEN" $API_URL | jq -c '[.[] | {name: .name, default_branch: .default_branch}]')
          echo "$REPOS" > repos.json

      - name: Upload repository list
        uses: actions/upload-artifact@v4
        with:
          name: repository-list
          path: repos.json

  create-branch-ruleset:
    runs-on: ubuntu-latest
    needs: fetch-repos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download repository list
        uses: actions/download-artifact@v4
        with:
          name: repository-list

      - name: Get DevOps Team ID
        id: fetch_bypass_team_id
        env:
          ACCESS_TOKEN: ${{ secrets.BLUE_ENERGY_TOKEN }}
          ORG_NAME: "EDBlueEnergy"
          TEAM_SLUG: "devops"
        run: |
          API_URL="https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_SLUG"
          response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $ACCESS_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
          $API_URL
          )
          team_id=$(echo "$response" | jq -r '.id')

          echo "TEAM_ID=$team_id" >> $GITHUB_ENV

      - name: Update Rulesets
        env:
          ACCESS_TOKEN: ${{ secrets.BLUE_ENERGY_TOKEN }}
          FEATUER_CONFIG_PATH: ".github/repo-feature-ruleset.json"
          AZURE_CONFIG_PATH: ".github/repo-azure-ruleset.json"
          ORG_NAME: "EDBlueEnergy"
          TEAM_ID: ${{env.TEAM_ID}}
        run: |

          # Get ruleset json
          FEATURE_RULESET=$(cat $FEATUER_CONFIG_PATH)
          FEATURE_RULESET_NAME=$(echo "$FEATURE_RULESET" | jq -r '.name')

          AZURE_RULESET=$(cat $AZURE_CONFIG_PATH)
          AZURE_RULESET_NAME=$(echo "$AZURE_RULESET" | jq -r '.name')

          # Add bypass team
          UPDATED_FEATURE_RULESET=$(echo "$FEATURE_RULESET" | jq --argjson team_id "$TEAM_ID" '. + {"bypass_actors":[{"actor_id":$team_id,"actor_type":"Team","bypass_mode":"always"}]}')
          UPDATED_AZURE_RULESET=$(echo "$AZURE_RULESET" | jq --argjson team_id "$TEAM_ID" '. + {"bypass_actors":[{"actor_id":$team_id,"actor_type":"Team","bypass_mode":"always"}]}')

          for repo_json in $(jq -c '.[]' repos.json); do
            REPO_NAME=$(echo "$repo_json" | jq -r '.name')
            DEFAULT_BRANCH=$(echo "$repo_json" | jq -r '.default_branch')

            if [ "$REPO_NAME" == ".github" ]; then
              echo "Skipping .github repo..."
              continue
            fi

            # Check create or update ruleset
            REPO_RULESET_LIST=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $ACCESS_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$ORG_NAME/$REPO_NAME/rulesets"
            )

            FEATURE_RULESET_ID=$(echo "$REPO_RULESET_LIST" | jq -r --arg ruleset_name "$FEATURE_RULESET_NAME" '.[] | select(.name == $ruleset_name) | .id')
            AZURE_RULESET_ID=$(echo "$REPO_RULESET_LIST" | jq -r --arg ruleset_name "$AZURE_RULESET_NAME" '.[] | select(.name == $ruleset_name) | .id')

            # - APPLY Feature ruleset
            if [ -z "$FEATURE_RULESET_ID" ]; then
              # API to CREATE ruleset
              REPO_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/rulesets"
              HTTP_METHOD="POST"
            else
              # API to UPDATE existing ruleset
              REPO_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/rulesets/$FEATURE_RULESET_ID"
              HTTP_METHOD="PUT"
            fi

            curl -L \
              -X $HTTP_METHOD \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $ACCESS_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "$UPDATED_FEATURE_RULESET" \
              "$REPO_URL"

            # - APPLY Azure ruleset
            if [ -z "$AZURE_RULESET_ID" ]; then
              # API to CREATE ruleset
              REPO_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/rulesets"
              HTTP_METHOD="POST"
            else
              # API to UPDATE existing ruleset
              REPO_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/rulesets/$AZURE_RULESET_ID"
              HTTP_METHOD="PUT"
            fi

            UPDATED_AZURE_RULESET_WITH_DEFAULT_BRANCH=$(echo "$UPDATED_AZURE_RULESET" | jq --arg default_branch "$DEFAULT_BRANCH" '.conditions.ref_name.include += ["refs/heads/$default_branch"]')

            curl -L \
              -X $HTTP_METHOD \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $ACCESS_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "$UPDATED_AZURE_RULESET_WITH_DEFAULT_BRANCH" \
              "$REPO_URL"
            
          done
