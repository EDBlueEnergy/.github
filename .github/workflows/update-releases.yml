name: Update releases

on:
  push:
    paths:
      - ".github/workflows/update-releases.yml"
      - ".github/workflows/templates/update-release.yml"
  workflow_dispatch:

jobs:
  fetch-repos:
    runs-on: ubuntu-latest
    steps:
      - name: List repositories
        id: list-repos
        run: |
          ACCESS_TOKEN=${{ secrets.BLUE_ENERGY_TOKEN }}
          ORG_NAME=EDBlueEnergy
          API_URL="https://api.github.com/orgs/$ORG_NAME/repos"
          REPOS=$(curl -s -H "Authorization: token $ACCESS_TOKEN" $API_URL | jq -c '[.[] | {name: .name, default_branch: .default_branch}]')
          echo "$REPOS" > repos.json

      - name: Upload repository list
        uses: actions/upload-artifact@v3
        with:
          name: repository-list
          path: repos.json

  update-releases:
    runs-on: ubuntu-latest
    needs: fetch-repos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download repository list
        uses: actions/download-artifact@v3
        with:
          name: repository-list
      - name: Loop through repositories
        run: |
          for repo_json in $(jq -c '.[]' repos.json); do
            repo_name=$(echo "$repo_json" | jq -r '.name')
            default_branch=$(echo "$repo_json" | jq -r '.default_branch')

            if [ "$repo_name" != "demo-repository" ] && [ "$repo_name" != "qmsweb" ]; then
              continue
            fi

            # Set the GITHUB_TOKEN as an environment variable
            export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            export BLUE_ENERGY_TOKEN="${{ secrets.BLUE_ENERGY_TOKEN }}"

            repo_url="https://$GITHUB_TOKEN:$BLUE_ENERGY_TOKEN@github.com/EDBlueEnergy/$repo_name.git"
            echo "Processing repo $repo_name on branch $default_branch from $repo_url"

            # Clone the repository using the GITHUB_TOKEN and HTTPS URL
            git clone $repo_url --branch $default_branch

            # Move into the cloned repository directory
            cd $repo_name

            # Set your Git user name and email
            git config user.name "blazpocrnja"
            git config user.email "bpocrnja@gmail.com"

            # Check if 'azure' branch exists, if not, fallback to default branch
            response=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Authorization: token $BLUE_ENERGY_TOKEN" "https://api.github.com/repos/EDBlueEnergy/$repo_name/branches/azure")
            if [ $response -eq 200 ]; then
              branch_name="azure"
            else
             branch_name=$default_branch
            fi

            mkdir -p .github/workflows
            cp ../.github/workflows/templates/update-release.yml ../.github/workflows/templates/update-release-draft.yml
            sed -i "s/\PARAMS_BRANCH_NAME/$branch_name/g" ../.github/workflows/templates/update-release-draft.yml
            cp ../.github/workflows/templates/update-release-draft.yml .github/workflows/update-release.yml


            git add .github

            if [[ -n $(git status --porcelain) ]]; then
              git commit -m "[Automation] Update organization-wide workflows ðŸ¤–"
              git push
            else
                echo "No changes to commit in $repo_name"
            fi

            # Move back to the original working directory
            cd ..

            # Clean up the cloned repository
            rm -rf $repo_name
          done
